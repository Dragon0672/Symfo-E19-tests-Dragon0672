imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: fr
    pictures_directory: '%kernel.project_dir%/web/uploads/pictures'
    picture_upload_path: 'uploads/pictures/'

framework:
    translator: { fallbacks: ['%locale%'] }
    #esi: ~
    #translator: { fallbacks: ['%locale%'] }
    secret: '%secret%'
    router:
        resource: '%kernel.project_dir%/app/config/routing.yml'
        strict_requirements: ~
    form: ~
    csrf_protection: ~
    validation: { enable_annotations: true }
    #serializer: { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale: '%locale%'
    trusted_hosts: ~
    session:
        # https://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id: session.handler.native_file
        save_path: '%kernel.project_dir%/var/sessions/%kernel.environment%'
    fragments: ~
    http_method_override: true
    assets: ~
    php_errors:
        log: true

# Twig Configuration
twig:
    debug: '%kernel.debug%'
    strict_variables: '%kernel.debug%'
    form_themes:
        - 'bootstrap_4_layout.html.twig'
        - 'admin/form/file.html.twig' #Si l'on souhaite utliser cet override globalement (sur tous les formuulaires avec un champs de type File)
    globals:
        picture_upload_path: '%picture_upload_path%'

# Doctrine Configuration
doctrine:
    dbal:
        driver: pdo_mysql
        host: '%database_host%'
        port: '%database_port%'
        dbname: '%database_name%'
        user: '%database_user%'
        password: '%database_password%'
        charset: UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: '%kernel.project_dir%/var/data/data.sqlite'
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #path: '%database_path%'

    orm:
        auto_generate_proxy_classes: '%kernel.debug%'
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true

# Swiftmailer Configuration
swiftmailer:
    transport: '%mailer_transport%'
    host: '%mailer_host%'
    username: '%mailer_user%'
    password: '%mailer_password%'
    spool: { type: memory }

# je saisi les namespace relatifs a mes entity
easy_admin:
    site_name: 'Hello ciné admin'
    design:
        brand_color: '#1ABC9C'
        menu: 
            - { entity: 'Movie', label: 'Film' }
            - { entity: 'Genre', label: 'Genre' }
            - { entity: 'MovieCast', label: 'Casting' }
            - { entity: 'MovieCrew', label: 'Team technique' }
            - { entity: 'Job', label: 'Job' }
            - { entity: 'Person', label: 'Personne' }
            - { entity: 'Department', label: 'Service' }
            - { entity: 'User', label: 'Utilisateur' }
#            - Job
    entities:
#        Listing pour un affichage simple des entités
#        - AppBundle\Entity\Department
#        - AppBundle\Entity\Genre
#        - AppBundle\Entity\Job
#        - AppBundle\Entity\Movie
#        - AppBundle\Entity\MovieCast
#        - AppBundle\Entity\MovieCrew
#        - AppBundle\Entity\Person
#        - AppBundle\Entity\User

#        Listing pour un affichage plus détaillé des entités
        Movie:
            class: AppBundle\Entity\Movie
            image_base_path: 'uploads/pictures/'
            list:
                fields:
                - { property: 'id' }
                - { property: 'title' }
                - { property: 'slug' }
                - { property: 'picture', type: 'image' }
                - { property: 'genres' }
                - { property: 'moviecasts' }
                sort: ['id', 'ASC']
        Genre:
            class: AppBundle\Entity\Genre
            list:
                fields:
                - { property: 'id' }
                - { property: 'name' }
                sort: ['id', 'ASC']
        MovieCast:
            class: AppBundle\Entity\MovieCast
            list:
                fields:
                - { property: 'id'}
                - { property: 'role'}
                - { property: 'orderCredit'}
                - { property: 'Person'}
                - { property: 'movie'}
                sort: ['id', 'ASC']
        MovieCrew:
            class: AppBundle\Entity\MovieCrew
            list:
                fields:
                - { property: 'id'}
                - { property: 'Person'}
                - { property: 'movie'}
                - { property: 'job'}
                sort: ['id', 'ASC']
        Job:
            class: AppBundle\Entity\Job
            list:
                fields:
                - { property: 'id' }
                - { property: 'name', type: 'text' }
                sort: ['id', 'ASC']
        Person:
            class: AppBundle\Entity\Person
            list:
                fields:
                - { property: 'id' }
                - { property: 'name' }
                - { property: 'moviecasts' }
                sort: ['id', 'ASC']
        Department:
            class: AppBundle\Entity\Department
            list:
                fields:
                - { property: 'id' }
                - { property: 'name' }
                sort: ['id', 'ASC']
        User:
            class: AppBundle\Entity\User
            list:
                fields:
                - { property: 'id' }
                - { property: 'username' }
                - { property: 'role' }
                - { property: 'isActive' }
                - { property: 'password' }
                - { property: 'email' }
                sort: ['id', 'ASC']

# LiipImagineBundle configuration
liip_imagine:

    resolvers:
        default:
            web_path: ~

    filter_sets:
        cache: ~
        # the name of the "filter set"
        thumb_show:
            quality: 80
            filters:
                # create a thumbnail: set size to LxH and use the "outbound" mode
                # to crop the image when the size ratio of the input differs
                # Ne pas oublier de vider le cache à chaque changement
                thumbnail: { size: [400, 600], mode: outbound }

        thumb_admin_list:
            quality: 80
            filters:
                thumbnail: { size: [42, 63], mode: outbound }

        thumb_admin_show:
            quality: 80
            filters:
                thumbnail: { size: [300, 450], mode: outbound }

        thumb_admin_edit:
            quality: 80
            filters:
                thumbnail: { size: [135, 210], mode: outbound }